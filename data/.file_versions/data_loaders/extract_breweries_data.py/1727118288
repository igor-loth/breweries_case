import io
import requests
import json
import os
import boto3
from botocore.client import Config
from datetime import datetime
import pytz
from dotenv import load_dotenv

load_dotenv()

# Definir configurações do MinIO
MINIO_ENDPOINT = os.getenv('MINIO_ENDPOINT', 'localhost:9000')
MINIO_ACCESS_KEY = os.getenv('MINIO_ACCESS_KEY', 'myaccesskey')
MINIO_SECRET_KEY = os.getenv('MINIO_SECRET_KEY', 'mysecretkey123')
MINIO_BUCKET = 'bronze'  

if 'data_loader' not in globals():
    from mage_ai.data_preparation.decorators import data_loader

@data_loader
def extract_data():
    # Conectar ao MinIO usando boto3 
    s3 = boto3.client(
        's3',
        endpoint_url=f'http://{MINIO_ENDPOINT}',
        aws_access_key_id=MINIO_ACCESS_KEY,
        aws_secret_access_key=MINIO_SECRET_KEY,
        config=Config(signature_version='s3v4'),
        region_name='us-east-1' 
    )
    
    # Verificar se o bucket existe e criar se não existir
    try:
        s3.head_bucket(Bucket=MINIO_BUCKET)
        print(f"Bucket '{MINIO_BUCKET}' já existe.")
    except:
        print(f"Bucket '{MINIO_BUCKET}' não encontrado. Criando o bucket...")
        s3.create_bucket(Bucket=MINIO_BUCKET)

    try:
        # Endpoint da API
        url = 'https://api.openbrewerydb.org/breweries'

        # Requisição para a API
        response = requests.get(url)
        
        if response.status_code == 200:
            breweries_data = response.json()  

            
            file_name = 'breweries_raw.json'

            # Salvar o resultado da extração no MinIO
            s3.put_object(
                Bucket=MINIO_BUCKET,
                Key=f'data/breweries/{file_name}',  
                Body=json.dumps(breweries_data, indent=4),
                ContentType='application/json'
            )

            print(f'Dados salvos com sucesso no MinIO em: {MINIO_BUCKET}/data/breweries/{file_name}')
        else:
            raise Exception(f'Erro ao acessar a API: {response.status_code}')

    except Exception as e:
        # Armazenar log de erro
        brasilia_tz = pytz.timezone('America/Sao_Paulo')
        error_message = f'{datetime.now()}: {str(e)}\n'
        print(f'Ocorreu um erro: {error_message}')

        
        log_file_name = f'log_{datetime.now(brasilia_tz).strftime("%Y-%m-%d_%H:%M:%S")}.txt'

        # Salvar o log de erro no MinIO
        s3.put_object(
            Bucket=MINIO_BUCKET,
            Key=f'logs/{log_file_name}', 
            Body=error_message,
            ContentType='text/plain'
        )

        print(f'Log de erro salvo no MinIO em: {MINIO_BUCKET}/logs/{log_file_name}')

if __name__ == "__main__":
    extract_data()
