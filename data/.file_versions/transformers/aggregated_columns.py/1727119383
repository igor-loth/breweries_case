import os
import pandas as pd
import pyarrow as pa
import pyarrow.parquet as pq
import boto3
from botocore.client import Config
from datetime import datetime
import pytz 
from io import BytesIO 
from dotenv import load_dotenv

load_dotenv()

# Definir configurações do MinIO
MINIO_ENDPOINT = os.getenv('MINIO_ENDPOINT', 'localhost:9000')
MINIO_ACCESS_KEY = os.getenv('MINIO_ACCESS_KEY')
MINIO_SECRET_KEY = os.getenv('MINIO_SECRET_KEY')
MINIO_BUCKET_SILVER = 'silver' 
MINIO_BUCKET_GOLD = 'gold'

if 'transformer' not in globals():
    from mage_ai.data_preparation.decorators import transformer

@transformer
def transform_data(*args, **kwargs):
    # Conectar ao MinIO usando boto3
    s3 = boto3.client(
        's3',
        endpoint_url=f'http://{MINIO_ENDPOINT}',
        aws_access_key_id=MINIO_ACCESS_KEY,
        aws_secret_access_key=MINIO_SECRET_KEY,
        config=Config(signature_version='s3v4'),
        region_name='us-east-1'
    )

    try:
        print("Iniciando o processo de transformação.")

        # Verificar se o bucket Gold existe e criar se não existir
        try:
            s3.head_bucket(Bucket=MINIO_BUCKET_GOLD)
            print(f"Bucket '{MINIO_BUCKET_GOLD}' já existe.")
        except:
            print(f"Bucket '{MINIO_BUCKET_GOLD}' não encontrado. Criando o bucket...")
            s3.create_bucket(Bucket=MINIO_BUCKET_GOLD)

        # Listar todos os arquivos Parquet da camada Silver no MinIO
        response = s3.list_objects_v2(Bucket=MINIO_BUCKET_SILVER, Prefix='data/breweries/')
        dataframes = []

        if 'Contents' not in response:
            raise ValueError("Nenhum arquivo encontrado na camada Silver.")

        # Carregar todos os arquivos Parquet da camada Silver
        for obj in response['Contents']:
            file_key = obj['Key']
            if file_key.endswith('.parquet'):
                # Ler o arquivo diretamente do MinIO
                parquet_data = s3.get_object(Bucket=MINIO_BUCKET_SILVER, Key=file_key)['Body'].read()
                df = pd.read_parquet(BytesIO(parquet_data))
                dataframes.append(df)
        
        # Concatenar todos os dataframes em um único dataframe
        if len(dataframes) == 0:
            raise ValueError("Nenhum arquivo Parquet foi encontrado na camada Silver.")

        df = pd.concat(dataframes)

        # Verificar se as colunas necessárias existem
        if 'state' not in df.columns or 'brewery_type' not in df.columns:
            raise ValueError("As colunas 'state' ou 'brewery_type' não foram encontradas nos dados.")
        
        # Realizar a agregação para contar o número de cervejarias por tipo e localização (state)
        aggregated_df = df.groupby(['state', 'brewery_type']).size().reset_index(name='brewery_count')

        # Criar diretório para dados Gold
        gold_data_dir = 'data/state_brewery_type/'
        minio_file_path = f'{gold_data_dir}breweries_aggregated.parquet'
        
        # Salvar os dados agregados no MinIO
        buffer = pa.BufferOutputStream()
        table = pa.Table.from_pandas(aggregated_df)
        pq.write_table(table, buffer)
        bytes_data = buffer.getvalue().to_pybytes()  # Converter para bytes

        s3.put_object(
            Bucket=MINIO_BUCKET_GOLD,
            Key=minio_file_path,  # Diretório e nome do arquivo
            Body=bytes_data,
            ContentType='application/octet-stream'
        )

        print(f'Dados agregados salvos no MinIO em: {MINIO_BUCKET_GOLD}/{minio_file_path}')

    except Exception as e:
        # Ajustar para usar horário de Brasília
        brasilia_tz = pytz.timezone('America/Sao_Paulo')
        error_message = f'{datetime.now(brasilia_tz)}: {str(e)}\n'
        print(f'Ocorreu um erro: {error_message}')

        # Nome do arquivo de log
        log_file_name = f'log_{datetime.now(brasilia_tz).strftime("%Y-%m-%d_%H:%M:%S")}.txt'

        # Salvar o log de erro no MinIO
        s3.put_object(
            Bucket=MINIO_BUCKET_GOLD,
            Key=f'logs/{log_file_name}',
            Body=error_message,
            ContentType='text/plain'
        )

        print(f'Log de erro salvo no MinIO em: {MINIO_BUCKET_GOLD}/logs/{log_file_name}')

if __name__ == "__main__":
    transform_data()
